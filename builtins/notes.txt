Getting help with Bash and your OS 

type: Determine type of comand, list contents of aliases and functions 

help: Display usage information about Bash builtins and keywords 

apropos: Search man pages 

man: System Manual 

info: Advanced manual system primarily used for GNU programs 

General reference commands to get started: 
	- man bash 
	- man man 
	- man -a intro 
	- help
	- help help 
	- info info 
	- info 

## Some useful defs ##

word: sequence of characters considered to be a single unit 

list: sequence of one or more commands or pipelines

name: a word consisting only of alphanumeric characters and underscores. Can not begin with a numeric character

parameter: an entity that stores values. 

variable: a parameter denoted by a name; there are positional and special parameters


## Return Status ##

Success: Command returns a status of 0 

Failure: Command returns a non-zero status

- Valid return values range from 0 to 255 
- The return value of the last command to have executed is captures in the special parameter $? 
- Many programs signal different types of failure or error with different return values, which allows us to handle errors programmatically 

true; echo $? # will result in 0, but that's the exit status of the 'echo' command 
false; echo $? # will result in 1, but that's the exit status of 'false' but the 'echo' will succeed 

## List Operators ##
list0; list : execute list0, then execute list1. Same as separation by newline 

list0 & list1 : execute list0 in a background subshell and simultaneously execute list1

list0 && list1 : execute list0, then execute list1 if list0 returns status 0

list0 || list2 : execute list0, then execute list2 only if list0 returns a non-zero status 

head -c5000 /dev/urandom | md5sum & echo hello; wait 

(type -a wait; help wait)

true && echo true

false || echo false 

# Conditionals: if 

Ex.1 
if list0 
	then list1
fi 

above_explanation: evaluate list0, then evaluate list1 only if list0 returns status 0 

Ex.2 
if list0
	then list1
	else list2
fi

above_explanation: evaluate list0, then evaluate list1, only if list0 returns status 0, otherwise, evaluate list2

Ex.3
if list0
	then list1
	elif list2
		then list3
		else list4
fi

above_explanations: evaluate list0, then evaluate list1, only if list0 returns status 0. Otherwise, evaluate list2, then evaluate list3 only if list2 returns status 0. Otherwise, evaluate list4

if fgrep -qi gentoo /etc/os-release 
then
	echo "gentoo " 
else 
	echo "not gentoo :/" 
fi

[expression] 
test expression 
	Evaluate conditional expression with the test builtin (or the analogous /bin/[or /bin/test commands if specified). 

[[expression]] 
	Evaluate conditional expression with the [[ keyword. 
	 - Word splitting is not performed during any parameter expansion 
	 - The righthand side of a string comparison (==, !=) is treated as a 'pattern when not quoted', as a string when quoted
	 - Regexes may be matched with the =~ operator 
	 - short circuiting logical operators && and || can be used to 'combine' condition expressions 

	[[ -e file ]] file exists
	[[ -f file ]] file is a regular file
	[[ -d file ]] file is a directory 
	[[ -t fd ]]   fd is open and refers to a terminal
	[[ file0 -nt file 1 ]] file0 is newer than file1 
	[[ file0 -ef file1 ]] file0 is a hard link to file1
	[[ -n string ]] string is non-empty 
	[[ -z string ]] string is empty  
	[[ string0 == "string1" ]] string0 and string1 are the same 
	[[ string0 != "string1" ]] string0 and string1 are not the same
	[[ string == pattern ]] string matches pattern 
	[[ string =~ regex ]] string matches reqular expression


## Pattern Matching ##

Pattern matching is used in Bash for the [[ and case keywords, pathname expansion, and some types of parameter expansion 

* matches any string, including null 

? matches any single character 

[character class] matches any one of the characters enclosed between [ and ]. 

[^...] matches the complement (any character 'not' in the class) 

[x-z] matches the range of characters from x to z

[[:class:]] matches according to these POSIX classes:
 - alnum
 - alpha
 - ascii
 - blank
 - ctrl
 - digit
 - graph
 - lower
 - print
 - punct
 - space

## case statements ## 
case word in 
	pattern0) 
		list0;;
	pattern1|pattern2)
		list1;;
esac

Explanation: match word against each pattern sequentially. 
			 When the first match is found, evaluate the list corresponding to that match and
			 stop matching

Note: the '|' (pipe) character between two patterns entails a match if either pattern matches (inclusive OR)

## Parameters ## 
Positional parameters: $1 $2 $3 $4 $5 ...${10}.. 
	- parameters passed to salient command, encapsulating words on the command line as arguments

Special parameters: $* $@ $# $- $$ $0 $! $? $_
	- parameters providing 'information' about positional parameters, the current shell, and the previous command. 

Variables: 
	- name=string
	- parameters which may be assigned values by the user. 
	- There are also some special shell variables which may provide information
	- toggle shell options, or configure certain features 

	For variable assignment, "=" must not have adjacent spaces

## Parameter Expansion: Conditionals ## 
* param is the name of the variable
* check if variable is unset, empty or non-empty

								unset param						param=""				param="gnu"
${param-default}                 default						  - 					   gnu
${param=default} 				name=default					  - 					   gnu
${param+alternate}				    - 							alternate				 alternate
${param?error} 					  error							  - 					   gnu

Treat empty as unset:
${param:-default}				 default						 default				   gnu
${param:=default}                name=default					 name=default			   gnu
${param:+alternate}				    - 							  - 					 alternate 
${param:?error} 				  error 						 error 					   gnu


# Preservation of error status #

false
err=$?
echo "error: exit code $err"


# Parameter Expansion: Substrings # 
param="mandrake"

Extraction							offset of 3, length 2
${param:offset}						drake
${param:offset:length}				dr

Removal from left edge:				pattern is "*a"
${param#pattern}					ndrake
${param##pattern}					ke

Removal from right edge				pattern is "a*"
${param%pattern}					mandr
${param%%pattern} 					m 
ex.
	echo "${BASH_VERSION:0:1}" 


## Parameter Expansion: Pattern Substitution ##
param=ubuntu

Substitution 					pattern is 'u?', string is 'X'
${param/pattern/string}			Xuntu
${param//pattern/string}        XXtu

left edge:
${param/#pattern/string}		Xbuntu

right edge:
${param/%pattern/string 		ubuntuX


## Indirection, Element Listing and Length ## 
name0="name1"; name1="hello"; array=(gnu not unix) 
indirect expansion: 
${!name0} 								hello

List names matching prefix "pa":
${!na*} or "${!na@}"					name0 name1

List keys in array:
${!array[*]} or "${!array[@]}" 			0 1 2 

Expand to length 
${#name0} 								5
${#array}								3

echo ${!BASH*} - expand everything that starts with bash
echo ${#PATH} - how long is your path

## Indexed Arrays ## 

Assign an array by elements:
	array=(zero one two "three and more")

Add to an array or modify an element:
	array+=("four and beyond" [0]=ZERO) 

Recreate array with spaces in elements as underscores:
	array=("${array[@]// /_}") 

Recreate array only with elements from index 2 to 4:
	array=("${array[@]:2:3}") 

Print element at index 1 of array (second element):
	echo "${array[1]}" 

Print all indexes:
	echo ${!array[@]} 

# Aritmetic Expressions # 
name++ increment name after evaluation 
name-- decrement name after evaluation 

++name increment name before evaluation 
--name decrement name before evaluation 

- + * / % ** <= >= < > == != && || 

- can be used as a test, returning 0 if the comparsion, equality, or inequality is true, or if the calculated number is not zero
- can provide in-line expansion when used like command substitution - $(( math )) 
- Bash does not natively support floating point (use awk, perl or something) 

echo $(( 3 + 11 )) 
echo $(( 3 >= 5 )) 
echo $(( 0 )) or (( 0 )) 
echo $(( i++ )) # don't need to put '$'

## Brace Expansion - Arbitrary Word Generation ## 

String generation:
prefix{ab,cd,ef}suffix 

Sequence generation:
prefix{x..y}suffix

Sequencing by specified increment (Bash 4+):
prefix{x..y..incr}suffix

- Bash can complete a list of files into nested brace expansion format with the ESC-{ key combination
- All key bindings may be displayed with bind -P
- Brace expansion may be nested and combined
- The prefix and suffix are optional

echo bash{,e{d,s},ful{,ly,ness},ing}
echo {1..5}{0,5}%
echo {10..55..5}%
echo {g..z..7} 
touch testfile && cp -v testifle{,.bak} 
man{,} 

## Compound Commands ##

Iteration:
Continously loop over list of commands delineated by the keyword do and done 

while until for select 

Conditionals:
Execute list of commands only under certain conditions 

if case 

Commnd groups:
Grouped list of command, sharing any external redirections and whose return value is that of the list 

(list) {list;}

## While and Until Loops ## 
(Typically) iterate based on an external resource

while list0; do list1; done 

Execute list0; if success, excecute list1 and repeat
Continue until list0 returns a non-zero status (fails)

until list0; do list1; done 
Execute list0; if failure, execute list1 and repeat
Continue until list0 returns a status of 0 (succeeds) 

*the following construct is incredibly handy for processing lines of text: while read 

# For and Select Loops #

*iterate based on command line args 

for name in words; do list; done 

* During each iteration, assign name the value of the next word, then execute list.
* Repeat until all words have been exhausted 

	initialization					condition 					afterthought
	for (( expr0 ; expr1; expr2 )); do list; done

* Evaluate expr0, then loop over ((expr1)) || break; { list; ((expr2));} - that is to say execute list only if expr1 returns non-zero status (fails), evaluating expr2 after each iteration. The expressions are evaluated as arithmetic expressions, and the list as a regular command list. 

select name in words, do list; done 

Create a menu with each word as an item. When the user makes a selection, name is assigned the value of the selected word, REPLY is assigned the index number of the selection, and list is executed.

# While and Until Loops # Again!!!
* typically iterate based on an external source 

while list0; do list1; done 

Execute list0; if success, execute list1 and repeat. 
Continue until list0 returns a non-zero status (fails).

until list0; do list1; done 

Execute list0; if failure, execute list1 and repeat.
Continue until list0 returns a status of 0 (succeeds) 


